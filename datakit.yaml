---
apiVersion: v1
kind: Namespace
metadata:
  name: datakit

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: datakit
rules:
- apiGroups: ["rbac.authorization.k8s.io"]
  resources: ["clusterroles"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "namespaces", "pods", "pods/log", "events", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "daemonsets", "statefulsets", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["batch"]
  resources: ["jobs", "cronjobs"]
  verbs: [ "get", "list", "watch"]
- apiGroups: ["guance.com"]
  resources: ["datakits"]
  verbs: ["get","list"]
- apiGroups: ["monitoring.coreos.com"]
  resources: ["podmonitors", "servicemonitors"]
  verbs: ["get", "list"]
- apiGroups: ["metrics.k8s.io"]
  resources: ["pods", "nodes"]
  verbs: ["get", "list"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---

apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: datakits.guance.com
spec:
  group: guance.com
  versions:
    - name: v1beta1
      served: true
      storage: true
      schema:
        openAPIV3Schema:
          type: object
          properties:
            spec:
              type: object
              properties:
                instances:
                  type: array
                  items:
                    type: object
                    properties:
                      k8sNamespace:
                        type: string
                      k8sDeployment:
                        type: string
                      datakit/logs:
                        type: string
                      inputConf:
                        type: string
  scope: Namespaced
  names:
    plural: datakits
    singular: datakit
    kind: Datakit
    shortNames:
    - dk

---

apiVersion: v1
kind: ServiceAccount
metadata:
  name: datakit
  namespace: datakit

---

apiVersion: v1
kind: Service
metadata:
  name: datakit-service
  namespace: datakit
spec:
  type: NodePort
  selector:
    app: daemonset-datakit
  ports:
    - protocol: TCP
      port: 9529
      targetPort: 9529

---

apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: datakit
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: datakit
subjects:
- kind: ServiceAccount
  name: datakit
  namespace: datakit
---

apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: datakit-ingress
  namespace: datakit
spec:
  rules:
  - host: datakit.dataflux.cn
    http:
      paths:
      - backend:
          service:
            name: datakit-service
            port:
              number: 9529
        path: /
        pathType: ImplementationSpecific

---

apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    app: daemonset-datakit
  name: datakit
  namespace: datakit
spec:
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: daemonset-datakit
  template:
    metadata:
      labels:
        app: daemonset-datakit
    spec:
      hostNetwork: true
      dnsPolicy: ClusterFirstWithHostNet
      containers:
      - env:
        - name: HOST_IP
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: status.hostIP
        - name: ENV_K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: ENV_DATAWAY
          value: https://openway.guance.com?token=<your-token> # 此处地址参考https://docs.guance.com/getting-started/getting-guance/获取
        - name: ENV_GLOBAL_HOST_TAGS
          value: host=__datakit_hostname,host_ip=__datakit_ip,cluster_name_k8s=guance_demo
        - name: ENV_GLOBAL_ELECTION_TAGS
          value: cluster_name_k8s=guance_demo
        - name: ENV_DEFAULT_ENABLED_INPUTS
          value: cpu,disk,diskio,mem,swap,system,hostobject,net,host_processes,container,ebpf,profile,statsd
        - name: ENV_ENABLE_ELECTION
          value: enable
        - name: ENV_NAMESPACE
          value: guance_demo
        - name: ENV_LOG
          value: stdout
        - name: ENV_HTTP_LISTEN
          value: 0.0.0.0:9529
        - name: HOST_PROC
          value: /rootfs/proc
        - name: HOST_SYS
          value: /rootfs/sys
        - name: HOST_ETC
          value: /rootfs/etc
        - name: HOST_VAR
          value: /rootfs/var
        - name: HOST_RUN
          value: /rootfs/run
        - name: HOST_DEV
          value: /rootfs/dev
        - name: HOST_ROOT
          value: /rootfs
        # # ---iploc-start
        - name: ENV_IPDB
          value: iploc
        # # ---iploc-end
        - name: ENV_RUM_ORIGIN_IP_HEADER
          value: "X-Original-Forwarded-For"
        - name: ENV_INPUT_CONTAINER_ENABLE_CONTAINER_METRIC
          value: "true"
        - name: ENV_INPUT_CONTAINER_ENABLE_K8S_METRIC
          value: "true"
        - name: ENV_INPUT_CONTAINER_ENABLE_POD_METRIC
          value: "true"
        image: pubrepo.guance.com/dataflux/datakit:1.8.0
        imagePullPolicy: IfNotPresent
        name: datakit
        ports:
        - containerPort: 9529
          hostPort: 9529
          name: port
          protocol: TCP
        resources:
          requests:
            memory: "250Mi"
            cpu: "250m"
          limits:
            memory: "4096Mi"
            cpu: "2000m"
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /usr/local/datakit/cache
          name: cache
          readOnly: false
        - mountPath: /rootfs
          name: rootfs
        - mountPath: /var/run
          name: run
        - mountPath: /sys/kernel/debug
          name: debugfs
        # # ---iploc-start
        - mountPath: /usr/local/datakit/data/ipdb/iploc/
          name: datakit-ipdb
        # # ---iploc-end
        - mountPath: /usr/local/datakit/conf.d/db/mysql.conf
          name: datakit-conf
          subPath: mysql.conf
          readOnly: true
        - mountPath: /usr/local/datakit/conf.d/ddtrace/ddtrace.conf
          name: datakit-conf
          subPath: ddtrace.conf
          readOnly: true
        - mountPath: /usr/local/datakit/conf.d/rum/rum.conf
          name: datakit-conf
          subPath: rum.conf
          readOnly: true
        - mountPath: /usr/local/datakit/data/rum/web
          name: sharedata
          readOnly: false
        workingDir: /usr/local/datakit
      # # ---iploc-start
      initContainers:
        - args:
            - tar -xf /opt/iploc.tar.gz -C /usr/local/datakit/data/ipdb/iploc/
          command:
            - bash
            - -c
          image: pubrepo.jiagouyun.com/datakit/iploc:1.0
          imagePullPolicy: IfNotPresent
          name: init-volume
          resources: {}
          volumeMounts:
            - mountPath: /usr/local/datakit/data/ipdb/iploc/
              name: datakit-ipdb
      # # ---iploc-end
      # # ---sourcemap-start
      initContainers:
      - command:
        - sh
        - -c
        - set -ex;mkdir -p /sharedata;cp -r /midsharedata/* /sharedata;
        image: zhaogangxp/sharedata:3.6.2_v1.14.0
        #imagePullPolicy: Always
        name: ddtrace-agent-sidecar
        volumeMounts:
        - mountPath: /sharedata
          name: sharedata
      restartPolicy: Always
      volumes:
      # # ---sourcemap-end
      hostIPC: true
      hostPID: true
      restartPolicy: Always
      serviceAccount: datakit
      serviceAccountName: datakit
      tolerations:
      - operator: Exists
      volumes:
      - configMap:
          name: datakit-conf
        name: datakit-conf
      - hostPath:
          path: /root/datakit_cache
        name: cache
      - hostPath:
          path: /
        name: rootfs
      - hostPath:
          path: /var/run
        name: run
      - hostPath:
          path: /sys/kernel/debug
        name: debugfs
      # # ---iploc-start
      - emptyDir: {}
        name: datakit-ipdb
      # # ---iploc-end
      # # ---sourcemap-start      
      - emptyDir: {}
        name: sharedata
      # # ---sourcemap-end
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate

---

apiVersion: v1
kind: ConfigMap
metadata:
  name: datakit-conf
  namespace: datakit
data:
    #mysql.conf: |-
    mysql.conf: |-
      [[inputs.mysql]]
        host = "mysql.ruoyi"
        user = "datakit"
        pass = "Datakit1234"
        port = 3306
    #ddtrace.conf: |-
    ddtrace.conf: |-
      [[inputs.ddtrace]]
        ## DDTrace Agent endpoints register by version respectively.
        ## Endpoints can be skipped listen by remove them from the list.
        ## Default value set as below. DO NOT MODIFY THESE ENDPOINTS if not necessary.
        endpoints = ["/v0.3/traces", "/v0.4/traces", "/v0.5/traces"]

        ## customer_tags is a list of keys contains keys set by client code like span.SetTag(key, value)
        ## that want to send to data center. Those keys set by client code will take precedence over
        ## keys in [inputs.ddtrace.tags]. DOT(.) IN KEY WILL BE REPLACED BY DASH(_) WHEN SENDING.
        customer_tags = ["peer.hostname","pod_name"]

        ## Keep rare tracing resources list switch.
        ## If some resources are rare enough(not presend in 1 hour), those resource will always send
        ## to data center and do not consider samplers and filters.
        # keep_rare_resource = false

        ## By default every error presents in span will be send to data center and omit any filters or
        ## sampler. If you want to get rid of some error status, you can set the error status list here.
        # omit_err_status = ["404"]

        ## Ignore tracing resources map like service:[resources...].
        ## The service name is the full service name in current application.
        ## The resource list is regular expressions uses to block resource names.
        ## If you want to block some resources universally under all services, you can set the
        ## service name as "*". Note: double quotes "" cannot be omitted.
        # [inputs.ddtrace.close_resource]
          # service1 = ["resource1", "resource2", ...]
          # service2 = ["resource1", "resource2", ...]
          # "*" = ["close_resource_under_all_services"]
          # ...

        ## Sampler config uses to set global sampling strategy.
        ## sampling_rate used to set global sampling rate.
        # [inputs.ddtrace.sampler]
          # sampling_rate = 1.0

        # [inputs.ddtrace.tags]
          # key1 = "value1"
          # key2 = "value2"
          # ...

        ## Threads config controls how many goroutines an agent cloud start.
        ## buffer is the size of jobs' buffering of worker channel.
        ## threads is the total number fo goroutines at running time.
        ## timeout is the duration(ms) before a job can return a result.
        # [inputs.ddtrace.threads]
          # buffer = 100
          # threads = 8

        ## Storage config a local storage space in hard dirver to cache trace data.
        ## path is the local file path used to cache data.
        ## capacity is total space size(MB) used to store data.
          [inputs.ddtrace.storage]
            path = "./ddtrace_storage"
            capacity = 5120

    rum.conf: |-
      [[inputs.rum]]
      ## profile Agent endpoints register by version respectively.
      ## Endpoints can be skipped listen by remove them from the list.
      ## Default value set as below. DO NOT MODIFY THESE ENDPOINTS if not necessary.
      endpoints = ["/v1/write/rum"]

      ## use to upload rum screenshot,html,etc...
      session_replay_endpoints = ["/v1/write/rum/replay"]

      ## Android command-line-tools HOME
      android_cmdline_home = "/usr/local/datakit/data/rum/tools/cmdline-tools"

      ## proguard HOME
      proguard_home = "/usr/local/datakit/data/rum/tools/proguard"

      ## android-ndk HOME
      ndk_home = "/usr/local/datakit/data/rum/tools/android-ndk"

      ## atos or atosl bin path
      ## for macOS datakit use the built-in tool atos default
      ## for Linux there are several tools that can be used to instead of macOS atos partially,
      ## such as https://github.com/everettjf/atosl-rs
      atos_bin_path = "/usr/local/datakit/data/rum/tools/atosl"

      ## Threads config controls how many goroutines an agent cloud start to handle HTTP request.
      ## buffer is the size of jobs' buffering of worker channel.
      ## threads is the total number fo goroutines at running time.
      # [inputs.rum.threads]
        # buffer = 100
        # threads = 8

      ## Storage config a local storage space in hard dirver to cache trace data.
      ## path is the local file path used to cache data.
      ## capacity is total space size(MB) used to store data.
        [inputs.rum.storage]
          path = "./rum_storage"
          capacity = 5120

      # Provide a list to resolve CDN of your static resource.
      # Below is the Datakit default built-in CDN list, you can uncomment that and change it to your cdn list,
      # it's a JSON array like: [{"domain": "CDN domain", "name": "CDN human readable name", "website": "CDN official website"},...],
      # domain field value can contains '*' as wildcard, for example: "kunlun*.com",
      # it will match "kunluna.com", "kunlunab.com" and "kunlunabc.com" but not "kunlunab.c.com".
      # cdn_map = '[{"domain":"15cdn.com","name":"腾正安全加速(原 15CDN)","website":"https://www.15cdn.com"},{"domain":"tzcdn.cn","name":"腾正安全加速(原 15CDN)","website":"https://www.15cdn.com"},...]'

